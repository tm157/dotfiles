###OK & FEEL ###
setw -g xterm-keys on

set -g default-terminal "xterm-256color"

set -g default-terminal "screen-256color"
unbind C-b
set -g prefix `
bind-key ` send-prefix

set -g base-index 1


# -------------------------------------------------------------------------------------------------------------------------------------------------------------
##default statusbar colors
set-option -g status-style bg=colour235,fg=colour7

#set-option -g prefix Escape
#unbind-key C-b
#bind-key Escape send-prefix
#
# default window title colors
set-window-option -g window-status-style fg=colour6,bg=default
#
# active window title colors
set-window-option -g window-status-current-style fg=colour14,bg=colour241,bright

#set -g pane-border-bg colour235
set -g pane-border-style fg=colour238
#set -g pane-active-border-bg colour236
set -g pane-active-border-style fg=colour6

## Enable mouse mode
set -g mouse off

setw -g monitor-activity on
set -g set-titles on
set -g set-titles-string '#H'
# be sure to see note* below
#set -g status-right "#[fg=colour75,bold](whoami)::[fg=colour75,bold](hostname -s)::[fg=colour75,bold](curl ipecho.net/plain;echo)    #(%a %d %b %R)" 

# status bar updates every 15s by default**, change to 1s here 
# (this step is optional - a lower latency might have negative battery/cpu usage impacts)
set -g status-interval 1


########################################################################
# Pane management / navigation
# navigation with C-{h,j,k,l} -- NO PREFIX
# https://gist.github.com/mislav/5189704
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
#######################################################################
#is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    #| grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
#bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
#bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
#bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
#bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
#bind-key -n C-\\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
##bind -n 'C-\' if-shell "$is_vim" "send-keys 'C-\\'" "select-pane -l"
#bind-key -T copy-mode-vi C-h select-pane -L
#bind-key -T copy-mode-vi C-j select-pane -D
#bind-key -T copy-mode-vi C-k select-pane -U
#bind-key -T copy-mode-vi C-l select-pane -R
#bind-key -T copy-mode-vi C-\ select-pane -l

# bind -n C-k run-shell 'tmux-vim-select-pane -U'
# bind -n C-j run-shell 'tmux-vim-select-pane -D'
# bind -n C-h run-shell 'tmux-vim-select-pane -L'
# bind -n C-l run-shell 'tmux-vim-select-pane -R'


is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d "[:alpha:]") < 3.0" | bc) -eq 1  ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell '[ $(echo "$(tmux -V | cut -d" " -f2 | tr -d "[:alpha:]") >= 3.0" | bc) -eq 1  ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\' 'select-pane -l'"
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind r source-file ~/.tmux.conf \; display "Reloaded Config"
# C-g C-k to passthrough a C-k
# C-k is consumed for pane navigation but we want it for kill-to-eol
#unbind C-k
#bind C-k send-key C-k
unbind '"'
unbind %

#Copy-paste integration
set-option -g default-command "reattach-to-user-namespace -l zsh"

# Use vim keybindings in copy mode
setw -g mode-keys vi
set-option -g default-command "reattach-to-user-namespace -l zsh"

# select text with 'v' and copy with 'y'
#bind-key -Tcopy-mode-vi 'v' send -X begin-selection
#bind-key -t vi-copy v begin-selection
#bind-key -Tcopy-mode-vi 'y' send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
#bind-key -t vi-copy y copy-pipe "reattach-to-use-namespace pbcopy"
#bind-key -Tcopy-mode-vi Escape send -X cancel
#bind-key -t vi-copy Escape cancel
#bind-key -Tcopy-mode-vi V send -X rectangle-toggle
#bind-key -t vi-copy V rectangle-toggle
set-window-option -g mode-keys vi
bind Escape copy-mode

# paste
unbind C-p
bind C-p paste-buffer

# Reload tmux conf
bind r source-file ~/.tmux.conf \; display "Reloaded config"

## Setup 'v' to begin selection as in Vim
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

## Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

## Bind 'P' to use pbpaste
#bind P run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"
#bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
#bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy'

# Resize the current pane using Alt + direction
bind -n M-k resize-pane -U 5
bind -n M-j resize-pane -D 5
bind -n M-h resize-pane -L 5
bind -n M-l resize-pane -R 5


set-option -g allow-rename off
set-option -g renumber-windows on

# better pane splitting
bind-key - split-window -v  -c '#{pane_current_path}'
bind-key \\ split-window -h  -c '#{pane_current_path}'

#bind '"' split-window -c "#{pane_current_path}"
#bind % split-window -h -c "#{pane_current_path}"
#bind c new-window -c "#{pane_current_path}"

bind-key -n C-S-Left swap-window -t -1
bind-key -n C-S-Right swap-window -t +1
